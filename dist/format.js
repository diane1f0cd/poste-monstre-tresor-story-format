window.storyFormat({"name":"Poste-Monstre-Tresor","version":"1.0.0","source":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t\t<meta charset=\"utf-8\">\n\t\t<title>{{STORY_NAME}}</title>\n\t</head>\n\t<body>\n        <h1>{{STORY_NAME}}</h1>\n\t\t{{STORY_DATA}}\n\t\t<script>            \n            //HTML passagedata element to JSON object\n            parsePassage = function(p) {\n                const pid = parseInt(p.getAttribute(\"pid\"), 10);\n                const name = p.getAttribute(\"name\");\n                const text = p.innerText;\n\n                let links = text.match(/\\[\\[[^\\[\\]]+\\]\\]/g) || [];\n                links = links.map(rawLink => {\n                    let split = rawLink\n                    .replace(\"[[\", \"\")\n                    .replace(\"]]\", \"\")\n                    .split(\"|\");\n\n                    return {\n                        \"rawText\" : rawLink,                        \n                        \"text\" : split[0],\n                        \"destination\" : split[1] || split[0]\n                    }\n                });\n\n                return { pid, name, text, links };\n            }\n\n            //JSON object to formatted text\n            renderPassage = function(p) {\n                //Number followed by text\n                let rendered = \"<b>￭\"+p.number+\": </b>\"+p.text;\n                //Remove newlines\n                rendered = rendered.replace(/\\n/g, \" \");\n                //Consolidate the links\n                p.links.forEach( link => {\n                    let destPassage = passages.find(pp => pp.name == link.destination);\n                    if(link.text == link.destination)\n                    {\n                        //[[some passage name]] becomes \"N\"\n                        rendered = rendered.replace(link.rawText, destPassage.number);\n                    } else \n                    {\n                        //[[go to|some passage name]] becomes \"go to N\"\n                        rendered = rendered.replace(link.rawText, \"<b>\"+link.text.trim()+\" \"+destPassage.number+\"</b>\");\n                    }                    \n                })\n                //Remove trailing spaces\n                return rendered.trim(); \n            }\n\n            let passages = [...document.querySelectorAll('tw-passagedata')];\n            //Parse the passages\n            passages = passages.map( p => parsePassage(p) );\n            //Sort them alphabetically according to their title\n            // (Use numbers at the beginning of passage titles to give the story a general structure)\n            passages.sort(function(a, b){\n                if(a.name < b.name) { return -1; }\n                if(a.name > b.name) { return 1; }\n                return 0;\n            })\n            //Assign a readable number to the passages, starting from 1\n            // we could use their passage id, but they're not guaranteed to be clean and sequential (idk how Twine manages them and I don't want to know)\n            passages.forEach( (p,i,arr) => arr[i].number = (i+1));\n            //Render the passages and join them into a single chunk of text\n            let rendered = passages\n            .map(p => renderPassage(p))\n            .join(\"       \"); //bunch of non-breakable spaces as separator\n\n            let result = document.createElement(\"div\");\n            result.innerHTML = rendered;\n            document.body.appendChild(result);\n\t\t</script>\n\t</body>\n</html>\n","description":"A linear rendering of a story, using numbers for passages and the links between them."});